HOST = 'localhost' - объявляете сервер - локал хост
PORT = 9095 - порт 9095


async def tcp_echo_client(host, port): - объявление метода
    reader, writer = await asyncio.open_connection(host, port) - попытаться открыть соединение, подключаясь через хост и порт
    message = 'Hello, world' - сообщение в переменной "Привет мир"

    writer.write(message.encode()) - кодируем сообщение
    await writer.drain() - отправляем его

    data = await reader.read(100) - ожидание ответа от сервера
    writer.close() - закрыть сервер
    await writer.wait_closed() - ожидать, когда закроется редактор

asyncio.run(tcp_echo_client(HOST, PORT)) - сказать, чтобы asynco использовал метод

#loop = asyncio.get_event_loop()
loop = asyncio.new_event_loop() - открыть новый сервер /цикл
asyncio.set_event_loop(loop) - сделать асинко включить цикл
task = loop.create_task(tcp_echo_client(HOST, PORT)) - создать задачу 
loop.run_until_complete(task) - выполнять задачу, которая будет работать пока не будет выполнена задача
